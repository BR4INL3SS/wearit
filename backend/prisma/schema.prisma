// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id Int @id @default(autoincrement())
  name String
  price Float
  imageUrl String
  availabilities Availability[]
  lines Line[]
  feedbacks Feedback[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Availability {
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storeId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int
  quantityOnHand Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([storeId, productId])
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  firstName String
  lastName String
  password String
  role Role @default(customer)
  orders Order[]
  feedbacks Feedback[]
  sessions Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  customer
  manager
}

model Line {
  lineNumber Int
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int
  price Int
  quantity Int
  @@id([lineNumber, orderId])
}

model Order {
  id Int @id @default(autoincrement())
  status OrderStatus @default(pending)
  total Float
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storeId Int
  lines Line[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  canceled
  confirmed
  pending
  completed
}

model Store {
  id Int @id @default(autoincrement())
  name String
  latitude Float
  longitutde Float
  openingHours String
  phoneNumber String
  orders Order[]
  availabilities Availability[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id Int @id @default(autoincrement())
  feedback String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
  valid Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}