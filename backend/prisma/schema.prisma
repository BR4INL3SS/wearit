// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Image {
  IMG_ID Int @id @default(autoincrement())
  PRODUCT Product @relation(fields: [PRO_ID], references: [PRO_ID], onDelete: Cascade, onUpdate: Cascade)
  PRO_ID Int
  IMG_URL String
  IMG_CREATED DateTime @default(now())
  IMG_UPDATED DateTime @updatedAt
}

model Product {
  PRO_ID Int @id @default(autoincrement())
  PRO_NAME String
  PRO_PRICE Float
  PRO_IMAGES Image[]
  PRO_AVAILABLE_QUANTITY Int
  PRO_LINES Line[]
  PRO_FEEDBACKS Feedback[]
  PRO_CREATED DateTime @default(now())
  PRO_UPDATED DateTime @updatedAt
}

model User {
  USR_ID Int @id @default(autoincrement())
  USR_EMAIL String @unique
  USR_FIRST_NAME String
  USR_LAST_NAME String
  USR_PASSWORD String
  USR_ROLE Role @default(customer)
  USR_IMAGE String?
  USR_ORDERS Order[]
  USR_FEEDBACKS Feedback[]
  USR_SESSIONS Session[]
  USR_CREATED DateTime @default(now())
  USR_UPDATED DateTime @updatedAt
}

enum Role {
  customer
  manager
}

model Line {
  LINE_NUMBER Int
  ORDER Order @relation(fields: [ORD_ID], references: [ORD_ID], onDelete: Cascade, onUpdate: Cascade)
  ORD_ID Int
  PRODUCT Product @relation(fields: [PRO_ID], references: [PRO_ID], onDelete: Cascade, onUpdate: Cascade)
  PRO_ID Int
  PRO_PRICE Float
  PRO_QUANTITY Int
  @@id([LINE_NUMBER, ORD_ID])
}

model Order {
  ORD_ID Int @id @default(autoincrement())
  ORD_STATUS OrderStatus @default(pending)
  ORD_TOTAL Float
  USER User @relation(fields: [USR_ID], references: [USR_ID], onDelete: Cascade, onUpdate: Cascade)
  USR_ID Int
  STORE Store @relation(fields: [STR_ID], references: [STR_ID], onDelete: Cascade, onUpdate: Cascade)
  STR_ID Int
  ORD_LINES Line[]
  ORD_CREATED DateTime @default(now())
  ORD_UPDATED DateTime @updatedAt
}

enum OrderStatus {
  canceled
  confirmed
  pending
  completed
}

model Store {
  STR_ID Int @id @default(autoincrement())
  STR_NAME String
  STR_LATITUDE Float
  STR_LONGITUDE Float
  STR_HOURS String
  STR_PHONE String
  STR_ORDERS Order[]
  STR_CREATED DateTime @default(now())
  STR_UPDATED DateTime @updatedAt

  @@unique([STR_LATITUDE, STR_LONGITUDE])
}

model Feedback {
  FDB_ID Int @id @default(autoincrement())
  FDB_COMMENT String
  USER User @relation(fields: [USR_ID], references: [USR_ID], onDelete: Cascade, onUpdate: Cascade)
  USR_ID Int
  PRODUCT Product @relation(fields: [PRO_ID], references: [PRO_ID], onDelete: Cascade, onUpdate: Cascade)
  PRO_ID Int
  FDB_CREATED DateTime @default(now())
  FDB_UPDATED DateTime @updatedAt
}

model Session {
  SES_ID Int @id @default(autoincrement())
  USER User @relation(fields: [USR_ID], references: [USR_ID], onDelete: Cascade, onUpdate: Cascade)
  USR_ID Int
  SES_VALID Boolean @default(true)
  SES_CREATED DateTime @default(now())
  SES_UPDATED DateTime @updatedAt
}